// Generated by CoffeeScript 1.8.0
(function() {
  var downloadDone, fileSystem, http, httpGet, icecast, io, ip, port, server, socketIO, stream, streamUrl;

  http = require('http');

  httpGet = require('http-get');

  socketIO = require('socket.io');

  icecast = require('icecast-stack');

  fileSystem = require('fs');

  port = process.env.PORT || 6969;

  ip = process.env.IP || '127.0.0.1';

  streamUrl = 'http://localhost:8000/stream';

  stream = icecast.createReadStream(streamUrl);

  stream.on('connect', function() {
    return console.log('Stream connected');
  });

  stream.on('metadata', function(meta) {
    var songTitle;
    songTitle = icecast.parseMetadata(meta).StreamTitle;
    return console.log('Playing %s', songTitle);
  });

  server = http.createServer().listen(port, ip, function() {
    return console.log('Server is running at %s:%s', ip, port);
  });

  io = socketIO.listen(server);

  io.sockets.on('connection', function(socket) {
    var clientIP;
    socket.emit('welcome', 'Welcome you :D');
    clientIP = socket.request.connection.remoteAddress;
    return socket.on('download-song', function(songInfo) {
      console.log('Download song: %s with IP %s', songInfo.name, clientIP);
      return httpGet.get({
        url: songInfo.url
      }, "./downloads/" + (clientIP.replace(/\./g, '')) + ".mp3", function(err, res) {
        if (err) {
          socket.emit('download-error', err);
        }
        downloadDone({
          ip: clientIP,
          name: songInfo.name,
          artist: songInfo.artist
        });
        return console.log('Done');
      });
    });
  });

  downloadDone = function(data) {
    io.sockets.emit('download-done', data);
    return fileSystem.appendFile('./list.txt', "./downloads/" + (data.ip.replace(/\./g, '')) + ".mp3", function() {
      return console.log('Update playlist done.');
    });
  };

}).call(this);
